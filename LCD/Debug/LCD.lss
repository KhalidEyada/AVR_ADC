
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000091c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000091c  00000990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014da  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000902  00000000  00000000  00001fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a45  00000000  00000000  000028c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  00003310  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055d  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c93  00000000  00000000  000039f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000468c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <main>
  7a:	0c 94 8c 04 	jmp	0x918	; 0x918 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	63 e0       	ldi	r22, 0x03	; 3
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f ec       	ldi	r24, 0xCF	; 207
  92:	97 e0       	ldi	r25, 0x07	; 7
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <LCD_sendCommand+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <LCD_sendCommand+0x18>
  9a:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_voidSetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	62 e0       	ldi	r22, 0x02	; 2
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
  a6:	8f ec       	ldi	r24, 0xCF	; 207
  a8:	97 e0       	ldi	r25, 0x07	; 7
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_sendCommand+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <LCD_sendCommand+0x2e>
  b0:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/*Put Code Here*/
	// Send most 4bits
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,(command&(1<<4))>>4);
  b2:	4c 2f       	mov	r20, r28
  b4:	40 71       	andi	r20, 0x10	; 16
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	55 95       	asr	r21
  ba:	47 95       	ror	r20
  bc:	55 95       	asr	r21
  be:	47 95       	ror	r20
  c0:	55 95       	asr	r21
  c2:	47 95       	ror	r20
  c4:	55 95       	asr	r21
  c6:	47 95       	ror	r20
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,(command&(1<<5))>>5);
  d0:	4c 2f       	mov	r20, r28
  d2:	40 72       	andi	r20, 0x20	; 32
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	55 95       	asr	r21
  d8:	47 95       	ror	r20
  da:	55 95       	asr	r21
  dc:	47 95       	ror	r20
  de:	55 95       	asr	r21
  e0:	47 95       	ror	r20
  e2:	55 95       	asr	r21
  e4:	47 95       	ror	r20
  e6:	55 95       	asr	r21
  e8:	47 95       	ror	r20
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,(command&(1<<6))>>6);
  f2:	4c 2f       	mov	r20, r28
  f4:	40 74       	andi	r20, 0x40	; 64
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	04 2e       	mov	r0, r20
  fa:	45 2f       	mov	r20, r21
  fc:	00 0c       	add	r0, r0
  fe:	44 1f       	adc	r20, r20
 100:	55 0b       	sbc	r21, r21
 102:	00 0c       	add	r0, r0
 104:	44 1f       	adc	r20, r20
 106:	55 1f       	adc	r21, r21
 108:	62 e0       	ldi	r22, 0x02	; 2
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,(command&(1<<7))>>7);
 110:	4c 2f       	mov	r20, r28
 112:	44 1f       	adc	r20, r20
 114:	44 27       	eor	r20, r20
 116:	44 1f       	adc	r20, r20
 118:	64 e0       	ldi	r22, 0x04	; 4
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 120:	8f ec       	ldi	r24, 0xCF	; 207
 122:	97 e0       	ldi	r25, 0x07	; 7
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_sendCommand+0xa2>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_sendCommand+0xa8>
 12a:	00 00       	nop
	
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	62 e0       	ldi	r22, 0x02	; 2
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 136:	8f ec       	ldi	r24, 0xCF	; 207
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_sendCommand+0xb8>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_sendCommand+0xbe>
 140:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_voidSetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 14c:	8f ec       	ldi	r24, 0xCF	; 207
 14e:	97 e0       	ldi	r25, 0x07	; 7
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_sendCommand+0xce>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_sendCommand+0xd4>
 156:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/*Put Code Here*/
	// send least 4bits
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,(command&(1<<0))>>0);
 158:	4c 2f       	mov	r20, r28
 15a:	41 70       	andi	r20, 0x01	; 1
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,(command&(1<<1))>>1);
 164:	4c 2f       	mov	r20, r28
 166:	42 70       	andi	r20, 0x02	; 2
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	55 95       	asr	r21
 16c:	47 95       	ror	r20
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,(command&(1<<2))>>2);
 176:	4c 2f       	mov	r20, r28
 178:	44 70       	andi	r20, 0x04	; 4
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	55 95       	asr	r21
 17e:	47 95       	ror	r20
 180:	55 95       	asr	r21
 182:	47 95       	ror	r20
 184:	62 e0       	ldi	r22, 0x02	; 2
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,(command&(1<<3))>>3);
 18c:	c8 70       	andi	r28, 0x08	; 8
 18e:	4c 2f       	mov	r20, r28
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	55 95       	asr	r21
 194:	47 95       	ror	r20
 196:	55 95       	asr	r21
 198:	47 95       	ror	r20
 19a:	55 95       	asr	r21
 19c:	47 95       	ror	r20
 19e:	64 e0       	ldi	r22, 0x04	; 4
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 1a6:	8f ec       	ldi	r24, 0xCF	; 207
 1a8:	97 e0       	ldi	r25, 0x07	; 7
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_sendCommand+0x128>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_sendCommand+0x12e>
 1b0:	00 00       	nop
	
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	62 e0       	ldi	r22, 0x02	; 2
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 1bc:	8f ec       	ldi	r24, 0xCF	; 207
 1be:	97 e0       	ldi	r25, 0x07	; 7
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_sendCommand+0x13e>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_sendCommand+0x144>
 1c6:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */

}
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <LCD_init>:
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
	/* Configure the direction for RS and E pins as output pins */
	DIO_voidSetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,DIO_u8_OUTPUT);
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	63 e0       	ldi	r22, 0x03	; 3
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,DIO_u8_OUTPUT);
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinDirection>
 1e0:	8f e3       	ldi	r24, 0x3F	; 63
 1e2:	9c e9       	ldi	r25, 0x9C	; 156
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD_init+0x18>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_init+0x1e>
 1ea:	00 00       	nop

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */


	/* Configure 4 pins in the data port as output pins */
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,DIO_u8_OUTPUT);
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,DIO_u8_OUTPUT);
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,DIO_u8_OUTPUT);
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,DIO_u8_OUTPUT);
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	64 e0       	ldi	r22, 0x04	; 4
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
 214:	83 e3       	ldi	r24, 0x33	; 51
 216:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
 21a:	82 e3       	ldi	r24, 0x32	; 50
 21c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
 220:	88 e2       	ldi	r24, 0x28	; 40
 222:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>


	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
 226:	8c e0       	ldi	r24, 0x0C	; 12
 228:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>
 232:	08 95       	ret

00000234 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
 234:	cf 93       	push	r28
 236:	c8 2f       	mov	r28, r24
	/*Put Code Here*/
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Instruction Mode RS=1 */
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	63 e0       	ldi	r22, 0x03	; 3
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 242:	8f ec       	ldi	r24, 0xCF	; 207
 244:	97 e0       	ldi	r25, 0x07	; 7
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCD_displayCharacter+0x12>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_displayCharacter+0x18>
 24c:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_voidSetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	62 e0       	ldi	r22, 0x02	; 2
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 258:	8f ec       	ldi	r24, 0xCF	; 207
 25a:	97 e0       	ldi	r25, 0x07	; 7
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <LCD_displayCharacter+0x28>
 260:	00 c0       	rjmp	.+0      	; 0x262 <LCD_displayCharacter+0x2e>
 262:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/*Put Code Here*/
	// Send most 4bits
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,(data&(1<<4))>>4);
 264:	4c 2f       	mov	r20, r28
 266:	40 71       	andi	r20, 0x10	; 16
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	55 95       	asr	r21
 26c:	47 95       	ror	r20
 26e:	55 95       	asr	r21
 270:	47 95       	ror	r20
 272:	55 95       	asr	r21
 274:	47 95       	ror	r20
 276:	55 95       	asr	r21
 278:	47 95       	ror	r20
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,(data&(1<<5))>>5);
 282:	4c 2f       	mov	r20, r28
 284:	40 72       	andi	r20, 0x20	; 32
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	55 95       	asr	r21
 28a:	47 95       	ror	r20
 28c:	55 95       	asr	r21
 28e:	47 95       	ror	r20
 290:	55 95       	asr	r21
 292:	47 95       	ror	r20
 294:	55 95       	asr	r21
 296:	47 95       	ror	r20
 298:	55 95       	asr	r21
 29a:	47 95       	ror	r20
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,(data&(1<<6))>>6);
 2a4:	4c 2f       	mov	r20, r28
 2a6:	40 74       	andi	r20, 0x40	; 64
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	04 2e       	mov	r0, r20
 2ac:	45 2f       	mov	r20, r21
 2ae:	00 0c       	add	r0, r0
 2b0:	44 1f       	adc	r20, r20
 2b2:	55 0b       	sbc	r21, r21
 2b4:	00 0c       	add	r0, r0
 2b6:	44 1f       	adc	r20, r20
 2b8:	55 1f       	adc	r21, r21
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,(data&(1<<7))>>7);
 2c2:	4c 2f       	mov	r20, r28
 2c4:	44 1f       	adc	r20, r20
 2c6:	44 27       	eor	r20, r20
 2c8:	44 1f       	adc	r20, r20
 2ca:	64 e0       	ldi	r22, 0x04	; 4
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 2d2:	8f ec       	ldi	r24, 0xCF	; 207
 2d4:	97 e0       	ldi	r25, 0x07	; 7
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_displayCharacter+0xa2>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_displayCharacter+0xa8>
 2dc:	00 00       	nop
	
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 2e8:	8f ec       	ldi	r24, 0xCF	; 207
 2ea:	97 e0       	ldi	r25, 0x07	; 7
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_displayCharacter+0xb8>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_displayCharacter+0xbe>
 2f2:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_voidSetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	62 e0       	ldi	r22, 0x02	; 2
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 2fe:	8f ec       	ldi	r24, 0xCF	; 207
 300:	97 e0       	ldi	r25, 0x07	; 7
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCD_displayCharacter+0xce>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_displayCharacter+0xd4>
 308:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/*Put Code Here*/
	// send least 4bits
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,(data&(1<<0))>>0);
 30a:	4c 2f       	mov	r20, r28
 30c:	41 70       	andi	r20, 0x01	; 1
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,(data&(1<<1))>>1);
 316:	4c 2f       	mov	r20, r28
 318:	42 70       	andi	r20, 0x02	; 2
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	55 95       	asr	r21
 31e:	47 95       	ror	r20
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,(data&(1<<2))>>2);
 328:	4c 2f       	mov	r20, r28
 32a:	44 70       	andi	r20, 0x04	; 4
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	55 95       	asr	r21
 330:	47 95       	ror	r20
 332:	55 95       	asr	r21
 334:	47 95       	ror	r20
 336:	62 e0       	ldi	r22, 0x02	; 2
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,(data&(1<<3))>>3);
 33e:	c8 70       	andi	r28, 0x08	; 8
 340:	4c 2f       	mov	r20, r28
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	55 95       	asr	r21
 346:	47 95       	ror	r20
 348:	55 95       	asr	r21
 34a:	47 95       	ror	r20
 34c:	55 95       	asr	r21
 34e:	47 95       	ror	r20
 350:	64 e0       	ldi	r22, 0x04	; 4
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 358:	8f ec       	ldi	r24, 0xCF	; 207
 35a:	97 e0       	ldi	r25, 0x07	; 7
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_displayCharacter+0x128>
 360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_displayCharacter+0x12e>
 362:	00 00       	nop
	
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	62 e0       	ldi	r22, 0x02	; 2
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 36e:	8f ec       	ldi	r24, 0xCF	; 207
 370:	97 e0       	ldi	r25, 0x07	; 7
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <LCD_displayCharacter+0x13e>
 376:	00 c0       	rjmp	.+0      	; 0x378 <LCD_displayCharacter+0x144>
 378:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */

	
}
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	ec 01       	movw	r28, r24
	/*Put Code Here*/
	/* display the string character by character until it reaches null character */
	while(*Str!='\0')
 384:	03 c0       	rjmp	.+6      	; 0x38c <LCD_displayString+0xe>
	{
		LCD_displayCharacter(*Str); 
 386:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_displayCharacter>
		Str++;
 38a:	21 96       	adiw	r28, 0x01	; 1
 */
void LCD_displayString(const char *Str)
{
	/*Put Code Here*/
	/* display the string character by character until it reaches null character */
	while(*Str!='\0')
 38c:	88 81       	ld	r24, Y
 38e:	81 11       	cpse	r24, r1
 390:	fa cf       	rjmp	.-12     	; 0x386 <LCD_displayString+0x8>
	{
		LCD_displayCharacter(*Str); 
		Str++;
	}
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <LCD_moveCursor>:
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
	/*Put Code Here*/
	/* go to the start address of the intended row then add the column position to the start address of the row  */
	switch(row){
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	59 f0       	breq	.+22     	; 0x3b2 <LCD_moveCursor+0x1a>
 39c:	28 f0       	brcs	.+10     	; 0x3a8 <LCD_moveCursor+0x10>
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	69 f0       	breq	.+26     	; 0x3bc <LCD_moveCursor+0x24>
 3a2:	83 30       	cpi	r24, 0x03	; 3
 3a4:	81 f0       	breq	.+32     	; 0x3c6 <LCD_moveCursor+0x2e>
 3a6:	08 95       	ret
		case 0:LCD_sendCommand(0x80+col); break;
 3a8:	80 e8       	ldi	r24, 0x80	; 128
 3aa:	86 0f       	add	r24, r22
 3ac:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>
 3b0:	08 95       	ret
		case 1:LCD_sendCommand(0xC0+col); break;
 3b2:	80 ec       	ldi	r24, 0xC0	; 192
 3b4:	86 0f       	add	r24, r22
 3b6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>
 3ba:	08 95       	ret
		case 2:LCD_sendCommand(0x94+col); break;
 3bc:	84 e9       	ldi	r24, 0x94	; 148
 3be:	86 0f       	add	r24, r22
 3c0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>
 3c4:	08 95       	ret
		case 3:LCD_sendCommand(0xD4+col); break;
 3c6:	84 ed       	ldi	r24, 0xD4	; 212
 3c8:	86 0f       	add	r24, r22
 3ca:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>
 3ce:	08 95       	ret

000003d0 <main>:
#include "../MCAL/DIO/DIO_Interface.h"
#include <util/delay.h>
#include <stdlib.h>


int main(){
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <main+0x6>
 3d6:	00 d0       	rcall	.+0      	; 0x3d8 <main+0x8>
 3d8:	1f 92       	push	r1
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_INPUT); /*setting Pin1 as input in Port A as it will be used lm35 input */
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinDirection>
	LCD_init(); /*initializing LCD*/
 3e8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_init>
	LCD_moveCursor(0,0); /*Moving the cursor to the start of the LCD*/
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_moveCursor>
	LCD_displayString("temperature = "); /*displaying the string temperature = */
 3f4:	80 e6       	ldi	r24, 0x60	; 96
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_displayString>
	ADC_init();/*initializing ADC*/
 3fc:	0e 94 2a 02 	call	0x454	; 0x454 <ADC_init>
	char str[5];/*initializing array of characters to contain the converted analog readings */
		while(1)
		{
			LCD_moveCursor(0,15); /*Moving the cursor to row 0 column 15*/
 400:	6f e0       	ldi	r22, 0x0F	; 15
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_moveCursor>
			uint16 temperature = ADC_readChannel(1)*0.49; /*LM35 adc values needes to be divide by 2 */
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 2f 02 	call	0x45e	; 0x45e <ADC_readChannel>
 40e:	bc 01       	movw	r22, r24
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__floatunsisf>
 418:	28 e4       	ldi	r18, 0x48	; 72
 41a:	31 ee       	ldi	r19, 0xE1	; 225
 41c:	4a ef       	ldi	r20, 0xFA	; 250
 41e:	5e e3       	ldi	r21, 0x3E	; 62
 420:	0e 94 c2 03 	call	0x784	; 0x784 <__mulsf3>
 424:	0e 94 2d 03 	call	0x65a	; 0x65a <__fixunssfsi>
 428:	dc 01       	movw	r26, r24
 42a:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 42c:	4a e0       	ldi	r20, 0x0A	; 10
 42e:	be 01       	movw	r22, r28
 430:	6f 5f       	subi	r22, 0xFF	; 255
 432:	7f 4f       	sbci	r23, 0xFF	; 255
 434:	0e 94 57 04 	call	0x8ae	; 0x8ae <__itoa_ncheck>
			itoa(temperature,str,10);
			LCD_displayString(str);
 438:	ce 01       	movw	r24, r28
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_displayString>
 440:	2f ef       	ldi	r18, 0xFF	; 255
 442:	89 e6       	ldi	r24, 0x69	; 105
 444:	98 e1       	ldi	r25, 0x18	; 24
 446:	21 50       	subi	r18, 0x01	; 1
 448:	80 40       	sbci	r24, 0x00	; 0
 44a:	90 40       	sbci	r25, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 450:	00 00       	nop
 452:	d6 cf       	rjmp	.-84     	; 0x400 <__EEPROM_REGION_LENGTH__>

00000454 <ADC_init>:
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = (1<<REFS0); // AREF=AVCC
 454:	80 e4       	ldi	r24, 0x40	; 64
 456:	87 b9       	out	0x07, r24	; 7
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 1Mhz/8 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //enable adc + PRrescalar div factor =128
 458:	87 e8       	ldi	r24, 0x87	; 135
 45a:	86 b9       	out	0x06, r24	; 6
 45c:	08 95       	ret

0000045e <ADC_readChannel>:
}

uint16 ADC_readChannel(uint8 channel_num)
{
	/* Put Code Here */
	ADMUX|=((0x0f)&channel_num); /* Set input channel to read */
 45e:	97 b1       	in	r25, 0x07	; 7
 460:	8f 70       	andi	r24, 0x0F	; 15
 462:	98 2b       	or	r25, r24
 464:	97 b9       	out	0x07, r25	; 7
	
	SET_BIT(ADCSRA,6); /* Start conversion */
 466:	86 b1       	in	r24, 0x06	; 6
 468:	80 64       	ori	r24, 0x40	; 64
 46a:	86 b9       	out	0x06, r24	; 6
	/* ADCSRA BIT 6 Description
	*ADSC will read as one as long as a conversion is in progress. When the conversion is complete,
	it returns to zero. Writing zero to this bit has no effect.
	*which means we can use this BIT as an indicator like of waiting for the interrupt bit.
	*/
	while(GET_BIT(ADCSRA,6)); 
 46c:	36 99       	sbic	0x06, 6	; 6
 46e:	fe cf       	rjmp	.-4      	; 0x46c <ADC_readChannel+0xe>
	
	return ADC; /* Read the digital value from the data register */
 470:	84 b1       	in	r24, 0x04	; 4
 472:	95 b1       	in	r25, 0x05	; 5
}
 474:	08 95       	ret

00000476 <DIO_voidSetPinValue>:
/*****************************************************************************************************/

void DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Value)
{
	
		switch(Copy_u8PortId)
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	19 f1       	breq	.+70     	; 0x4c0 <DIO_voidSetPinValue+0x4a>
 47a:	30 f0       	brcs	.+12     	; 0x488 <DIO_voidSetPinValue+0x12>
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	e1 f1       	breq	.+120    	; 0x4f8 <DIO_voidSetPinValue+0x82>
 480:	83 30       	cpi	r24, 0x03	; 3
 482:	09 f4       	brne	.+2      	; 0x486 <DIO_voidSetPinValue+0x10>
 484:	55 c0       	rjmp	.+170    	; 0x530 <DIO_voidSetPinValue+0xba>
 486:	08 95       	ret
		{
			case DIO_u8_PORTA:  switch(Copy_u8Value)
 488:	44 23       	and	r20, r20
 48a:	19 f0       	breq	.+6      	; 0x492 <DIO_voidSetPinValue+0x1c>
 48c:	41 30       	cpi	r20, 0x01	; 1
 48e:	69 f0       	breq	.+26     	; 0x4aa <DIO_voidSetPinValue+0x34>
 490:	08 95       	ret
			{
				case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);     break;
 492:	2b b3       	in	r18, 0x1b	; 27
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_voidSetPinValue+0x28>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_voidSetPinValue+0x24>
 4a2:	80 95       	com	r24
 4a4:	82 23       	and	r24, r18
 4a6:	8b bb       	out	0x1b, r24	; 27
 4a8:	08 95       	ret
				case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);     break;
 4aa:	2b b3       	in	r18, 0x1b	; 27
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_voidSetPinValue+0x40>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	6a 95       	dec	r22
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_voidSetPinValue+0x3c>
 4ba:	82 2b       	or	r24, r18
 4bc:	8b bb       	out	0x1b, r24	; 27
 4be:	08 95       	ret
			}
			break;
			case DIO_u8_PORTB:  switch(Copy_u8Value)
 4c0:	44 23       	and	r20, r20
 4c2:	19 f0       	breq	.+6      	; 0x4ca <DIO_voidSetPinValue+0x54>
 4c4:	41 30       	cpi	r20, 0x01	; 1
 4c6:	69 f0       	breq	.+26     	; 0x4e2 <DIO_voidSetPinValue+0x6c>
 4c8:	08 95       	ret
			{
				case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);     break;
 4ca:	28 b3       	in	r18, 0x18	; 24
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_voidSetPinValue+0x60>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_voidSetPinValue+0x5c>
 4da:	80 95       	com	r24
 4dc:	82 23       	and	r24, r18
 4de:	88 bb       	out	0x18, r24	; 24
 4e0:	08 95       	ret
				case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);     break;
 4e2:	28 b3       	in	r18, 0x18	; 24
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_voidSetPinValue+0x78>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_voidSetPinValue+0x74>
 4f2:	82 2b       	or	r24, r18
 4f4:	88 bb       	out	0x18, r24	; 24
 4f6:	08 95       	ret
			}
			break;
			case DIO_u8_PORTC:  switch(Copy_u8Value)
 4f8:	44 23       	and	r20, r20
 4fa:	19 f0       	breq	.+6      	; 0x502 <DIO_voidSetPinValue+0x8c>
 4fc:	41 30       	cpi	r20, 0x01	; 1
 4fe:	69 f0       	breq	.+26     	; 0x51a <DIO_voidSetPinValue+0xa4>
 500:	08 95       	ret
			{
				case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);     break;
 502:	25 b3       	in	r18, 0x15	; 21
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_voidSetPinValue+0x98>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	6a 95       	dec	r22
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_voidSetPinValue+0x94>
 512:	80 95       	com	r24
 514:	82 23       	and	r24, r18
 516:	85 bb       	out	0x15, r24	; 21
 518:	08 95       	ret
				case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);     break;
 51a:	25 b3       	in	r18, 0x15	; 21
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_voidSetPinValue+0xb0>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_voidSetPinValue+0xac>
 52a:	82 2b       	or	r24, r18
 52c:	85 bb       	out	0x15, r24	; 21
 52e:	08 95       	ret
			}
			break;
			case DIO_u8_PORTD:  switch(Copy_u8Value)
 530:	44 23       	and	r20, r20
 532:	19 f0       	breq	.+6      	; 0x53a <DIO_voidSetPinValue+0xc4>
 534:	41 30       	cpi	r20, 0x01	; 1
 536:	69 f0       	breq	.+26     	; 0x552 <DIO_voidSetPinValue+0xdc>
 538:	08 95       	ret
			{
				case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);     break;
 53a:	22 b3       	in	r18, 0x12	; 18
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_voidSetPinValue+0xd0>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_voidSetPinValue+0xcc>
 54a:	80 95       	com	r24
 54c:	82 23       	and	r24, r18
 54e:	82 bb       	out	0x12, r24	; 18
 550:	08 95       	ret
				case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);     break;
 552:	22 b3       	in	r18, 0x12	; 18
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_voidSetPinValue+0xe8>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	6a 95       	dec	r22
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_voidSetPinValue+0xe4>
 562:	82 2b       	or	r24, r18
 564:	82 bb       	out	0x12, r24	; 18
 566:	08 95       	ret

00000568 <DIO_voidSetPinDirection>:
/* Description:	function used to decide the usage of a specific pin inside a defined port either input or output    */
/********************************************************************************************************************/
void DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Direction)
{

		switch(Copy_u8PortId)
 568:	81 30       	cpi	r24, 0x01	; 1
 56a:	19 f1       	breq	.+70     	; 0x5b2 <DIO_voidSetPinDirection+0x4a>
 56c:	30 f0       	brcs	.+12     	; 0x57a <DIO_voidSetPinDirection+0x12>
 56e:	82 30       	cpi	r24, 0x02	; 2
 570:	e1 f1       	breq	.+120    	; 0x5ea <DIO_voidSetPinDirection+0x82>
 572:	83 30       	cpi	r24, 0x03	; 3
 574:	09 f4       	brne	.+2      	; 0x578 <DIO_voidSetPinDirection+0x10>
 576:	55 c0       	rjmp	.+170    	; 0x622 <DIO_voidSetPinDirection+0xba>
 578:	08 95       	ret
		{
			case DIO_u8_PORTA:  switch(Copy_u8Direction)
 57a:	44 23       	and	r20, r20
 57c:	19 f0       	breq	.+6      	; 0x584 <DIO_voidSetPinDirection+0x1c>
 57e:	41 30       	cpi	r20, 0x01	; 1
 580:	69 f0       	breq	.+26     	; 0x59c <DIO_voidSetPinDirection+0x34>
 582:	08 95       	ret
			{
				case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);     break;
 584:	2a b3       	in	r18, 0x1a	; 26
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <DIO_voidSetPinDirection+0x28>
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	6a 95       	dec	r22
 592:	e2 f7       	brpl	.-8      	; 0x58c <DIO_voidSetPinDirection+0x24>
 594:	80 95       	com	r24
 596:	82 23       	and	r24, r18
 598:	8a bb       	out	0x1a, r24	; 26
 59a:	08 95       	ret
				case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);     break;
 59c:	2a b3       	in	r18, 0x1a	; 26
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_voidSetPinDirection+0x40>
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	6a 95       	dec	r22
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_voidSetPinDirection+0x3c>
 5ac:	82 2b       	or	r24, r18
 5ae:	8a bb       	out	0x1a, r24	; 26
 5b0:	08 95       	ret
			}
			break;
			case DIO_u8_PORTB:  switch(Copy_u8Direction)
 5b2:	44 23       	and	r20, r20
 5b4:	19 f0       	breq	.+6      	; 0x5bc <DIO_voidSetPinDirection+0x54>
 5b6:	41 30       	cpi	r20, 0x01	; 1
 5b8:	69 f0       	breq	.+26     	; 0x5d4 <DIO_voidSetPinDirection+0x6c>
 5ba:	08 95       	ret
			{
				case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);     break;
 5bc:	27 b3       	in	r18, 0x17	; 23
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_voidSetPinDirection+0x60>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	6a 95       	dec	r22
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_voidSetPinDirection+0x5c>
 5cc:	80 95       	com	r24
 5ce:	82 23       	and	r24, r18
 5d0:	87 bb       	out	0x17, r24	; 23
 5d2:	08 95       	ret
				case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);     break;
 5d4:	27 b3       	in	r18, 0x17	; 23
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_voidSetPinDirection+0x78>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	6a 95       	dec	r22
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_voidSetPinDirection+0x74>
 5e4:	82 2b       	or	r24, r18
 5e6:	87 bb       	out	0x17, r24	; 23
 5e8:	08 95       	ret
			}
			break;
			case DIO_u8_PORTC:  switch(Copy_u8Direction)
 5ea:	44 23       	and	r20, r20
 5ec:	19 f0       	breq	.+6      	; 0x5f4 <DIO_voidSetPinDirection+0x8c>
 5ee:	41 30       	cpi	r20, 0x01	; 1
 5f0:	69 f0       	breq	.+26     	; 0x60c <DIO_voidSetPinDirection+0xa4>
 5f2:	08 95       	ret
			{
				case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);     break;
 5f4:	24 b3       	in	r18, 0x14	; 20
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_voidSetPinDirection+0x98>
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	6a 95       	dec	r22
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_voidSetPinDirection+0x94>
 604:	80 95       	com	r24
 606:	82 23       	and	r24, r18
 608:	84 bb       	out	0x14, r24	; 20
 60a:	08 95       	ret
				case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);     break;
 60c:	24 b3       	in	r18, 0x14	; 20
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_voidSetPinDirection+0xb0>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_voidSetPinDirection+0xac>
 61c:	82 2b       	or	r24, r18
 61e:	84 bb       	out	0x14, r24	; 20
 620:	08 95       	ret
			}
			break;
			case DIO_u8_PORTD:  switch(Copy_u8Direction)
 622:	44 23       	and	r20, r20
 624:	19 f0       	breq	.+6      	; 0x62c <DIO_voidSetPinDirection+0xc4>
 626:	41 30       	cpi	r20, 0x01	; 1
 628:	69 f0       	breq	.+26     	; 0x644 <DIO_voidSetPinDirection+0xdc>
 62a:	08 95       	ret
			{
				case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);     break;
 62c:	21 b3       	in	r18, 0x11	; 17
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_voidSetPinDirection+0xd0>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	6a 95       	dec	r22
 63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_voidSetPinDirection+0xcc>
 63c:	80 95       	com	r24
 63e:	82 23       	and	r24, r18
 640:	81 bb       	out	0x11, r24	; 17
 642:	08 95       	ret
				case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);     break;
 644:	21 b3       	in	r18, 0x11	; 17
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_voidSetPinDirection+0xe8>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	6a 95       	dec	r22
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_voidSetPinDirection+0xe4>
 654:	82 2b       	or	r24, r18
 656:	81 bb       	out	0x11, r24	; 17
 658:	08 95       	ret

0000065a <__fixunssfsi>:
 65a:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_splitA>
 65e:	88 f0       	brcs	.+34     	; 0x682 <__fixunssfsi+0x28>
 660:	9f 57       	subi	r25, 0x7F	; 127
 662:	98 f0       	brcs	.+38     	; 0x68a <__fixunssfsi+0x30>
 664:	b9 2f       	mov	r27, r25
 666:	99 27       	eor	r25, r25
 668:	b7 51       	subi	r27, 0x17	; 23
 66a:	b0 f0       	brcs	.+44     	; 0x698 <__fixunssfsi+0x3e>
 66c:	e1 f0       	breq	.+56     	; 0x6a6 <__fixunssfsi+0x4c>
 66e:	66 0f       	add	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	88 1f       	adc	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	1a f0       	brmi	.+6      	; 0x67e <__fixunssfsi+0x24>
 678:	ba 95       	dec	r27
 67a:	c9 f7       	brne	.-14     	; 0x66e <__fixunssfsi+0x14>
 67c:	14 c0       	rjmp	.+40     	; 0x6a6 <__fixunssfsi+0x4c>
 67e:	b1 30       	cpi	r27, 0x01	; 1
 680:	91 f0       	breq	.+36     	; 0x6a6 <__fixunssfsi+0x4c>
 682:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_zero>
 686:	b1 e0       	ldi	r27, 0x01	; 1
 688:	08 95       	ret
 68a:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_zero>
 68e:	67 2f       	mov	r22, r23
 690:	78 2f       	mov	r23, r24
 692:	88 27       	eor	r24, r24
 694:	b8 5f       	subi	r27, 0xF8	; 248
 696:	39 f0       	breq	.+14     	; 0x6a6 <__fixunssfsi+0x4c>
 698:	b9 3f       	cpi	r27, 0xF9	; 249
 69a:	cc f3       	brlt	.-14     	; 0x68e <__fixunssfsi+0x34>
 69c:	86 95       	lsr	r24
 69e:	77 95       	ror	r23
 6a0:	67 95       	ror	r22
 6a2:	b3 95       	inc	r27
 6a4:	d9 f7       	brne	.-10     	; 0x69c <__fixunssfsi+0x42>
 6a6:	3e f4       	brtc	.+14     	; 0x6b6 <__fixunssfsi+0x5c>
 6a8:	90 95       	com	r25
 6aa:	80 95       	com	r24
 6ac:	70 95       	com	r23
 6ae:	61 95       	neg	r22
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255
 6b2:	8f 4f       	sbci	r24, 0xFF	; 255
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	08 95       	ret

000006b8 <__floatunsisf>:
 6b8:	e8 94       	clt
 6ba:	09 c0       	rjmp	.+18     	; 0x6ce <__floatsisf+0x12>

000006bc <__floatsisf>:
 6bc:	97 fb       	bst	r25, 7
 6be:	3e f4       	brtc	.+14     	; 0x6ce <__floatsisf+0x12>
 6c0:	90 95       	com	r25
 6c2:	80 95       	com	r24
 6c4:	70 95       	com	r23
 6c6:	61 95       	neg	r22
 6c8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ca:	8f 4f       	sbci	r24, 0xFF	; 255
 6cc:	9f 4f       	sbci	r25, 0xFF	; 255
 6ce:	99 23       	and	r25, r25
 6d0:	a9 f0       	breq	.+42     	; 0x6fc <__floatsisf+0x40>
 6d2:	f9 2f       	mov	r31, r25
 6d4:	96 e9       	ldi	r25, 0x96	; 150
 6d6:	bb 27       	eor	r27, r27
 6d8:	93 95       	inc	r25
 6da:	f6 95       	lsr	r31
 6dc:	87 95       	ror	r24
 6de:	77 95       	ror	r23
 6e0:	67 95       	ror	r22
 6e2:	b7 95       	ror	r27
 6e4:	f1 11       	cpse	r31, r1
 6e6:	f8 cf       	rjmp	.-16     	; 0x6d8 <__floatsisf+0x1c>
 6e8:	fa f4       	brpl	.+62     	; 0x728 <__floatsisf+0x6c>
 6ea:	bb 0f       	add	r27, r27
 6ec:	11 f4       	brne	.+4      	; 0x6f2 <__floatsisf+0x36>
 6ee:	60 ff       	sbrs	r22, 0
 6f0:	1b c0       	rjmp	.+54     	; 0x728 <__floatsisf+0x6c>
 6f2:	6f 5f       	subi	r22, 0xFF	; 255
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	8f 4f       	sbci	r24, 0xFF	; 255
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	16 c0       	rjmp	.+44     	; 0x728 <__floatsisf+0x6c>
 6fc:	88 23       	and	r24, r24
 6fe:	11 f0       	breq	.+4      	; 0x704 <__floatsisf+0x48>
 700:	96 e9       	ldi	r25, 0x96	; 150
 702:	11 c0       	rjmp	.+34     	; 0x726 <__floatsisf+0x6a>
 704:	77 23       	and	r23, r23
 706:	21 f0       	breq	.+8      	; 0x710 <__floatsisf+0x54>
 708:	9e e8       	ldi	r25, 0x8E	; 142
 70a:	87 2f       	mov	r24, r23
 70c:	76 2f       	mov	r23, r22
 70e:	05 c0       	rjmp	.+10     	; 0x71a <__floatsisf+0x5e>
 710:	66 23       	and	r22, r22
 712:	71 f0       	breq	.+28     	; 0x730 <__floatsisf+0x74>
 714:	96 e8       	ldi	r25, 0x86	; 134
 716:	86 2f       	mov	r24, r22
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	2a f0       	brmi	.+10     	; 0x728 <__floatsisf+0x6c>
 71e:	9a 95       	dec	r25
 720:	66 0f       	add	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	88 1f       	adc	r24, r24
 726:	da f7       	brpl	.-10     	; 0x71e <__floatsisf+0x62>
 728:	88 0f       	add	r24, r24
 72a:	96 95       	lsr	r25
 72c:	87 95       	ror	r24
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret

00000732 <__fp_split3>:
 732:	57 fd       	sbrc	r21, 7
 734:	90 58       	subi	r25, 0x80	; 128
 736:	44 0f       	add	r20, r20
 738:	55 1f       	adc	r21, r21
 73a:	59 f0       	breq	.+22     	; 0x752 <__fp_splitA+0x10>
 73c:	5f 3f       	cpi	r21, 0xFF	; 255
 73e:	71 f0       	breq	.+28     	; 0x75c <__fp_splitA+0x1a>
 740:	47 95       	ror	r20

00000742 <__fp_splitA>:
 742:	88 0f       	add	r24, r24
 744:	97 fb       	bst	r25, 7
 746:	99 1f       	adc	r25, r25
 748:	61 f0       	breq	.+24     	; 0x762 <__fp_splitA+0x20>
 74a:	9f 3f       	cpi	r25, 0xFF	; 255
 74c:	79 f0       	breq	.+30     	; 0x76c <__fp_splitA+0x2a>
 74e:	87 95       	ror	r24
 750:	08 95       	ret
 752:	12 16       	cp	r1, r18
 754:	13 06       	cpc	r1, r19
 756:	14 06       	cpc	r1, r20
 758:	55 1f       	adc	r21, r21
 75a:	f2 cf       	rjmp	.-28     	; 0x740 <__fp_split3+0xe>
 75c:	46 95       	lsr	r20
 75e:	f1 df       	rcall	.-30     	; 0x742 <__fp_splitA>
 760:	08 c0       	rjmp	.+16     	; 0x772 <__fp_splitA+0x30>
 762:	16 16       	cp	r1, r22
 764:	17 06       	cpc	r1, r23
 766:	18 06       	cpc	r1, r24
 768:	99 1f       	adc	r25, r25
 76a:	f1 cf       	rjmp	.-30     	; 0x74e <__fp_splitA+0xc>
 76c:	86 95       	lsr	r24
 76e:	71 05       	cpc	r23, r1
 770:	61 05       	cpc	r22, r1
 772:	08 94       	sec
 774:	08 95       	ret

00000776 <__fp_zero>:
 776:	e8 94       	clt

00000778 <__fp_szero>:
 778:	bb 27       	eor	r27, r27
 77a:	66 27       	eor	r22, r22
 77c:	77 27       	eor	r23, r23
 77e:	cb 01       	movw	r24, r22
 780:	97 f9       	bld	r25, 7
 782:	08 95       	ret

00000784 <__mulsf3>:
 784:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__mulsf3x>
 788:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_round>
 78c:	0e 94 38 04 	call	0x870	; 0x870 <__fp_pscA>
 790:	38 f0       	brcs	.+14     	; 0x7a0 <__mulsf3+0x1c>
 792:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_pscB>
 796:	20 f0       	brcs	.+8      	; 0x7a0 <__mulsf3+0x1c>
 798:	95 23       	and	r25, r21
 79a:	11 f0       	breq	.+4      	; 0x7a0 <__mulsf3+0x1c>
 79c:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_inf>
 7a0:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_nan>
 7a4:	11 24       	eor	r1, r1
 7a6:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_szero>

000007aa <__mulsf3x>:
 7aa:	0e 94 99 03 	call	0x732	; 0x732 <__fp_split3>
 7ae:	70 f3       	brcs	.-36     	; 0x78c <__mulsf3+0x8>

000007b0 <__mulsf3_pse>:
 7b0:	95 9f       	mul	r25, r21
 7b2:	c1 f3       	breq	.-16     	; 0x7a4 <__mulsf3+0x20>
 7b4:	95 0f       	add	r25, r21
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	55 1f       	adc	r21, r21
 7ba:	62 9f       	mul	r22, r18
 7bc:	f0 01       	movw	r30, r0
 7be:	72 9f       	mul	r23, r18
 7c0:	bb 27       	eor	r27, r27
 7c2:	f0 0d       	add	r31, r0
 7c4:	b1 1d       	adc	r27, r1
 7c6:	63 9f       	mul	r22, r19
 7c8:	aa 27       	eor	r26, r26
 7ca:	f0 0d       	add	r31, r0
 7cc:	b1 1d       	adc	r27, r1
 7ce:	aa 1f       	adc	r26, r26
 7d0:	64 9f       	mul	r22, r20
 7d2:	66 27       	eor	r22, r22
 7d4:	b0 0d       	add	r27, r0
 7d6:	a1 1d       	adc	r26, r1
 7d8:	66 1f       	adc	r22, r22
 7da:	82 9f       	mul	r24, r18
 7dc:	22 27       	eor	r18, r18
 7de:	b0 0d       	add	r27, r0
 7e0:	a1 1d       	adc	r26, r1
 7e2:	62 1f       	adc	r22, r18
 7e4:	73 9f       	mul	r23, r19
 7e6:	b0 0d       	add	r27, r0
 7e8:	a1 1d       	adc	r26, r1
 7ea:	62 1f       	adc	r22, r18
 7ec:	83 9f       	mul	r24, r19
 7ee:	a0 0d       	add	r26, r0
 7f0:	61 1d       	adc	r22, r1
 7f2:	22 1f       	adc	r18, r18
 7f4:	74 9f       	mul	r23, r20
 7f6:	33 27       	eor	r19, r19
 7f8:	a0 0d       	add	r26, r0
 7fa:	61 1d       	adc	r22, r1
 7fc:	23 1f       	adc	r18, r19
 7fe:	84 9f       	mul	r24, r20
 800:	60 0d       	add	r22, r0
 802:	21 1d       	adc	r18, r1
 804:	82 2f       	mov	r24, r18
 806:	76 2f       	mov	r23, r22
 808:	6a 2f       	mov	r22, r26
 80a:	11 24       	eor	r1, r1
 80c:	9f 57       	subi	r25, 0x7F	; 127
 80e:	50 40       	sbci	r21, 0x00	; 0
 810:	9a f0       	brmi	.+38     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 812:	f1 f0       	breq	.+60     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 814:	88 23       	and	r24, r24
 816:	4a f0       	brmi	.+18     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 818:	ee 0f       	add	r30, r30
 81a:	ff 1f       	adc	r31, r31
 81c:	bb 1f       	adc	r27, r27
 81e:	66 1f       	adc	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	91 50       	subi	r25, 0x01	; 1
 826:	50 40       	sbci	r21, 0x00	; 0
 828:	a9 f7       	brne	.-22     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 82a:	9e 3f       	cpi	r25, 0xFE	; 254
 82c:	51 05       	cpc	r21, r1
 82e:	80 f0       	brcs	.+32     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 830:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_inf>
 834:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_szero>
 838:	5f 3f       	cpi	r21, 0xFF	; 255
 83a:	e4 f3       	brlt	.-8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 83c:	98 3e       	cpi	r25, 0xE8	; 232
 83e:	d4 f3       	brlt	.-12     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 840:	86 95       	lsr	r24
 842:	77 95       	ror	r23
 844:	67 95       	ror	r22
 846:	b7 95       	ror	r27
 848:	f7 95       	ror	r31
 84a:	e7 95       	ror	r30
 84c:	9f 5f       	subi	r25, 0xFF	; 255
 84e:	c1 f7       	brne	.-16     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 850:	fe 2b       	or	r31, r30
 852:	88 0f       	add	r24, r24
 854:	91 1d       	adc	r25, r1
 856:	96 95       	lsr	r25
 858:	87 95       	ror	r24
 85a:	97 f9       	bld	r25, 7
 85c:	08 95       	ret

0000085e <__fp_inf>:
 85e:	97 f9       	bld	r25, 7
 860:	9f 67       	ori	r25, 0x7F	; 127
 862:	80 e8       	ldi	r24, 0x80	; 128
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	08 95       	ret

0000086a <__fp_nan>:
 86a:	9f ef       	ldi	r25, 0xFF	; 255
 86c:	80 ec       	ldi	r24, 0xC0	; 192
 86e:	08 95       	ret

00000870 <__fp_pscA>:
 870:	00 24       	eor	r0, r0
 872:	0a 94       	dec	r0
 874:	16 16       	cp	r1, r22
 876:	17 06       	cpc	r1, r23
 878:	18 06       	cpc	r1, r24
 87a:	09 06       	cpc	r0, r25
 87c:	08 95       	ret

0000087e <__fp_pscB>:
 87e:	00 24       	eor	r0, r0
 880:	0a 94       	dec	r0
 882:	12 16       	cp	r1, r18
 884:	13 06       	cpc	r1, r19
 886:	14 06       	cpc	r1, r20
 888:	05 06       	cpc	r0, r21
 88a:	08 95       	ret

0000088c <__fp_round>:
 88c:	09 2e       	mov	r0, r25
 88e:	03 94       	inc	r0
 890:	00 0c       	add	r0, r0
 892:	11 f4       	brne	.+4      	; 0x898 <__fp_round+0xc>
 894:	88 23       	and	r24, r24
 896:	52 f0       	brmi	.+20     	; 0x8ac <__fp_round+0x20>
 898:	bb 0f       	add	r27, r27
 89a:	40 f4       	brcc	.+16     	; 0x8ac <__fp_round+0x20>
 89c:	bf 2b       	or	r27, r31
 89e:	11 f4       	brne	.+4      	; 0x8a4 <__fp_round+0x18>
 8a0:	60 ff       	sbrs	r22, 0
 8a2:	04 c0       	rjmp	.+8      	; 0x8ac <__fp_round+0x20>
 8a4:	6f 5f       	subi	r22, 0xFF	; 255
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	8f 4f       	sbci	r24, 0xFF	; 255
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	08 95       	ret

000008ae <__itoa_ncheck>:
 8ae:	bb 27       	eor	r27, r27
 8b0:	4a 30       	cpi	r20, 0x0A	; 10
 8b2:	31 f4       	brne	.+12     	; 0x8c0 <__itoa_ncheck+0x12>
 8b4:	99 23       	and	r25, r25
 8b6:	22 f4       	brpl	.+8      	; 0x8c0 <__itoa_ncheck+0x12>
 8b8:	bd e2       	ldi	r27, 0x2D	; 45
 8ba:	90 95       	com	r25
 8bc:	81 95       	neg	r24
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__utoa_common>

000008c4 <__utoa_ncheck>:
 8c4:	bb 27       	eor	r27, r27

000008c6 <__utoa_common>:
 8c6:	fb 01       	movw	r30, r22
 8c8:	55 27       	eor	r21, r21
 8ca:	aa 27       	eor	r26, r26
 8cc:	88 0f       	add	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	aa 1f       	adc	r26, r26
 8d2:	a4 17       	cp	r26, r20
 8d4:	10 f0       	brcs	.+4      	; 0x8da <__utoa_common+0x14>
 8d6:	a4 1b       	sub	r26, r20
 8d8:	83 95       	inc	r24
 8da:	50 51       	subi	r21, 0x10	; 16
 8dc:	b9 f7       	brne	.-18     	; 0x8cc <__utoa_common+0x6>
 8de:	a0 5d       	subi	r26, 0xD0	; 208
 8e0:	aa 33       	cpi	r26, 0x3A	; 58
 8e2:	08 f0       	brcs	.+2      	; 0x8e6 <__utoa_common+0x20>
 8e4:	a9 5d       	subi	r26, 0xD9	; 217
 8e6:	a1 93       	st	Z+, r26
 8e8:	00 97       	sbiw	r24, 0x00	; 0
 8ea:	79 f7       	brne	.-34     	; 0x8ca <__utoa_common+0x4>
 8ec:	b1 11       	cpse	r27, r1
 8ee:	b1 93       	st	Z+, r27
 8f0:	11 92       	st	Z+, r1
 8f2:	cb 01       	movw	r24, r22
 8f4:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <strrev>

000008f8 <strrev>:
 8f8:	dc 01       	movw	r26, r24
 8fa:	fc 01       	movw	r30, r24
 8fc:	67 2f       	mov	r22, r23
 8fe:	71 91       	ld	r23, Z+
 900:	77 23       	and	r23, r23
 902:	e1 f7       	brne	.-8      	; 0x8fc <strrev+0x4>
 904:	32 97       	sbiw	r30, 0x02	; 2
 906:	04 c0       	rjmp	.+8      	; 0x910 <strrev+0x18>
 908:	7c 91       	ld	r23, X
 90a:	6d 93       	st	X+, r22
 90c:	70 83       	st	Z, r23
 90e:	62 91       	ld	r22, -Z
 910:	ae 17       	cp	r26, r30
 912:	bf 07       	cpc	r27, r31
 914:	c8 f3       	brcs	.-14     	; 0x908 <strrev+0x10>
 916:	08 95       	ret

00000918 <_exit>:
 918:	f8 94       	cli

0000091a <__stop_program>:
 91a:	ff cf       	rjmp	.-2      	; 0x91a <__stop_program>
